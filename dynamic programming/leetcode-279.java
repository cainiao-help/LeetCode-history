/*
279. 完全平方数
给你一个整数 n ，返回 和为 n 的完全平方数的最少数量 。
完全平方数 是一个整数，其值等于另一个整数的平方；换句话说，其值等于一个整数自乘的积。例如，1、4、9 和 16 都是完全平方数，而 3 和 11 不是。

示例 1：
输入：n = 12
输出：3 
解释：12 = 4 + 4 + 4
  
示例 2：
输入：n = 13
输出：2
解释：13 = 4 + 9

提示：
1 <= n <= 104
*/

// 动态规划问题，把一个整数的完全平方数最少和的问题转化为当前数是否为整数的平方，若不是则该整数的完全平方数最少数量由前一个数决定，即当前数一定由一个完全平方数组成，最小数量即为一个完全平方数加上当前数减去完全平方数的值的最小数量。（即 dp[i-j*j]+1）

    public static void main(String[] args) {
        int num = 43;
        System.out.println(numSquares(num));

    }

    public static int numSquares(int n) {
        int[] dp = new int[n+1];                        // 建立每个数的完全平方数的最少数量统计表
        for (int i = 2; i < dp.length; i++) {           // 初始化数组的值为n，即每个数全部都由1组成，也可以用Arrays.fill（数组，值）来初始化。
            dp[i] = n;
        }
        dp[0] = 0;
        dp[1] = 1;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j*j <= i; j++) {
                dp[i] = Math.min(dp[i], dp[i-j*j]+1);  // 比较当前位置的值和第i-j*j位置的值，因为当前数至少由一个完全平方数组成。所以再加一。
            }
        }
        return dp[n];

    }
