153. 寻找旋转排序数组中的最小值
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]
注意，数组 [a[0], a[1], a[2], ..., a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], ..., a[n-2]] 。
给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。
你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。
示例 1：
输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
  
示例 2：
输入：nums = [4,5,6,7,0,1,2]
输出：0
解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。
  
示例 3：
输入：nums = [11,13,15,17]
输出：11
解释：原数组为 [11,13,15,17] ，旋转 4 次得到输入数组。
 
提示：
n == nums.length
1 <= n <= 5000
-5000 <= nums[i] <= 5000
nums 中的所有整数 互不相同
nums 原来是一个升序排序的数组，并进行了 1 至 n 次旋转

  //类似 < 搜索旋转数组> 题，由题目可知所给出的数组是由两段递增元素数组组成，只需要查找两段数组分界点即可

      public static void main(String[] args) {
        int[] nums = {3,4,5,1,2};
        System.out.println(findMin(nums));;

    }

    public static int findMin(int[] nums) {
        int res = helper(nums);
        if (nums[res] <= nums[0]){   //若返回的是右边界，则说明该数组只有一段递增元素 （即该段数组已经按递增顺序排列）或第二段数组只有一个元素（即最后一个）
                                     // 只需要判断第一个元素是否小于返回的元素即可判断是否为最小元素 
            return nums[res];
        }else {
            return nums[0];
        }
    }
    public static int helper(int[] nums){   //返回分界点函数
        int left = 0;
        int right = nums.length - 1;
        while (left < right){
            int mid = (right - left) / 2 + left;
            if (nums[left] > nums[mid]){
                right = mid;   // 若左指针大于左右指针中点说明两段的分界点在中点左侧，将右指针移到中点
            }else {
                left = left + 1;  // 若左指针小于等于中点说明中点和左指针指向同一个元素或者分界点在左指针的右侧n个位置，左指针加一继续判断。
            }
        }
        return left;
    }
