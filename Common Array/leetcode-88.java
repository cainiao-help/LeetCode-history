/*
88. 合并两个有序数组
给你两个按 非递减顺序 排列的整数数组 nums1 和 nums2，另有两个整数 m 和 n ，分别表示 nums1 和 nums2 中的元素数目。
请你 合并 nums2 到 nums1 中，使合并后的数组同样按 非递减顺序 排列。
注意：最终，合并后数组不应由函数返回，而是存储在数组 nums1 中。为了应对这种情况，nums1 的初始长度为 m + n，其中前 m 个元素表示应合并的元素，后 n 个元素为 0 ，应忽略。nums2 的长度为 n 。

示例 1：
输入：nums1 = [1,2,3,0,0,0], m = 3, nums2 = [2,5,6], n = 3
输出：[1,2,2,3,5,6]
解释：需要合并 [1,2,3] 和 [2,5,6] 。
合并结果是 [1,2,2,3,5,6] ，其中斜体加粗标注的为 nums1 中的元素。
  
示例 2：
输入：nums1 = [1], m = 1, nums2 = [], n = 0
输出：[1]
解释：需要合并 [1] 和 [] 。
合并结果是 [1] 。
  
示例 3：
输入：nums1 = [0], m = 0, nums2 = [1], n = 1
输出：[1]
解释：需要合并的数组是 [] 和 [1] 。
合并结果是 [1] 。
注意，因为 m = 0 ，所以 nums1 中没有元素。nums1 中仅存的 0 仅仅是为了确保合并结果可以顺利存放到 nums1 中。
 
提示：
nums1.length == m + n
nums2.length == n
0 <= m, n <= 200
1 <= m + n <= 200
-109 <= nums1[i], nums2[j] <= 109
 

进阶：你可以设计实现一个时间复杂度为 O(m + n) 的算法解决此问题吗？
*/

// 该题要保证直接在其数组上进行修改，则从前到后还是比较困难，若是从后往前就相对简单，只需要两个指针，两个指针分别指向当前遍历的数组
// 只需要从后遍历给定的nums1数组即可，依次修改当前最大值，由于nums1后面都是0，所以根本不用保存后面的值，若是正向遍历则需要保存值

    public static void main(String[] args) {  // 测试用
        int[] nums1 = {1,2,3,0,0,0};
        int[] nums2 = {2,5,6};
        merge(nums1, 3, nums2, 3);
    }

    public static void merge(int[] nums1, int m, int[] nums2, int n){ 
        int n1 = m - 1;            // 指向nums1下标为m-1的元素位置
        int n2 = n - 1;            // 指向nums2下标为n-1的元素位置
        for (int i = nums1.length - 1; i >= 0; i--) {   // 从后往前填充nums1，这样不需要保存后面的0.
            if (n1 < 0){                   // 若nums1的指向小于0，即下标小于0，则说明nums1已经被遍历完，直接填入nums2当前指向的元素即可
                nums1[i] = nums2[n2];
                n2--;
                continue;
            }
            if (n2 < 0){                   // 若nums2的指向小于0，即下标小于0，则说明nums2已经被遍历完，直接填入nums1当前指向的元素即可
                nums1[i] = nums1[n1];
                n1--;
                continue;
            }
            if (nums1[n1] >= nums2[n2]){    // 若当前nums1的指针的值大于nums2的指针的值，则将nums1的值填入从后往前遍历的位置，并使得n1指针左移
                nums1[i] = nums1[n1];
                n1--;
            }else {
                nums1[i] = nums2[n2];       // 反之则将nums2的值填入，并使n2指针左移
                n2--;
            }
        }
        // System.out.println(Arrays.toString(nums1));    // 调试用，需要调试时打开即可
    }
